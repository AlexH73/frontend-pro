import { type JSX } from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import { useNavigate } from 'react-router-dom';
import { useTheme } from '../../themeContext/useTheme';
import styles from './CardSecurityCheck.module.css';
import image from '../../../../../../../../assets/images/CardSecurityCheck.jpg';

// –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ Yup
const validationSchema = Yup.object({
  cardNumber1: Yup.string()
    .required('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    .matches(/^\d{4}$/, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —Ü–∏—Ñ—Ä—ã'),
  cardNumber2: Yup.string()
    .required('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    .matches(/^\d{4}$/, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —Ü–∏—Ñ—Ä—ã'),
  cardNumber3: Yup.string()
    .required('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    .matches(/^\d{4}$/, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —Ü–∏—Ñ—Ä—ã'),
  cvc2: Yup.string()
    .required('CVC2 –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    .matches(/^\d{3}$/, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —Ü–∏—Ñ—Ä—ã')
    .length(3, 'CVC2 –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —Ü–∏—Ñ—Ä—ã'),
});

// –¢–∏–ø—ã –¥–ª—è Formik
interface FormValues {
  cardNumber1: string;
  cardNumber2: string;
  cardNumber3: string;
  cvc2: string;
}

export default function CardSecurityCheck(): JSX.Element {
  const navigate = useNavigate();
  useTheme();

  const initialValues: FormValues = {
    cardNumber1: '',
    cardNumber2: '',
    cardNumber3: '',
    cvc2: '',
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
  const handleInputChange = (
    index: number,
    value: string,
    setFieldValue: (field: string, value: string) => void
  ) => {
    setFieldValue(`cardNumber${index + 1}`, value);

    // –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ 4 —Ü–∏—Ñ—Ä—ã –∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–º—É
    if (value.length === 4 && index < 2) {
      const nextInput = document.getElementById(
        `cardNumber${index + 2}`
      ) as HTMLInputElement;
      if (nextInput) {
        nextInput.focus();
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Backspace
  const handleKeyDown = (
    index: number,
    e: React.KeyboardEvent,
    values: FormValues
  ) => {
    const currentValue = values[
      `cardNumber${index + 1}` as keyof FormValues
    ] as string;

    if (e.key === 'Backspace' && currentValue === '') {
      if (index > 0) {
        const prevInput = document.getElementById(
          `cardNumber${index}`
        ) as HTMLInputElement;
        if (prevInput) {
          prevInput.focus();
        }
      }
    }
  };

  const handleSubmit = (
    _values: FormValues,
    { setSubmitting, resetForm }: any
  ) => {
    // –®—É—Ç–ª–∏–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–π
    setTimeout(() => {
      setSubmitting(false);
      resetForm();

      // –®—É—Ç–ª–∏–≤—ã–π alert
      alert(
        'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã! üí≥\n\n' +
          '–í–∞—à–∏ –¥–µ–Ω—é—à–∫–∏ —Ç–µ–ø–µ—Ä—å –Ω–∞—à–∏! üí∞\n' +
          '–®—É—Ç–∫–∞! üòÑ –≠—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞.\n\n' +
          '–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ù–ò–ö–û–ì–î–ê –Ω–µ –≤–≤–æ–¥–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç –Ω–∞ –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö —Å–∞–π—Ç–∞—Ö!'
      );
    }, 1000);
  };

  return (
    <>
      <div className='text-center mb-4'>
        <div className={styles.securityImage}>
          <img src={image} alt='Simson' />
          <span className={styles.shieldIcon}>üõ°Ô∏è</span>
        </div>
        <h1 className={`h3 fw-bold ${styles.title}`}>–ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò</h1>
        <p className={styles.subtitle}>
          –£–∑–Ω–∞–π—Ç–µ, –µ—Å—Ç—å –ª–∏ –≤–∞—à–∞ –∫–∞—Ä—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ö–∞–∫–µ—Ä–æ–≤!
        </p>
        <p className={styles.description}>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.</p>
      </div>

      <div className={styles.divider}></div>

      {/* –§–æ—Ä–º–∞ */}
      <Formik
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({ isSubmitting, values, setFieldValue }) => (
          <Form>
            {/* –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã - —Ä–∞–∑–±–∏—Ç—ã–π –Ω–∞ 3 —á–∞—Å—Ç–∏ */}
            <div className='mb-4'>
              <label className={`form-label fw-semibold ${styles.label}`}>
                –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:
              </label>

              <div className={styles.cardNumberGrid}>
                {[0, 1, 2].map((index) => (
                  <div key={index} className={styles.cardNumberField}>
                    <Field
                      name={`cardNumber${index + 1}`}
                      id={`cardNumber${index + 1}`}
                      type='text'
                      className={`form-control text-center ${styles.input} ${
                        values[`cardNumber${index + 1}` as keyof FormValues] &&
                        values[`cardNumber${index + 1}` as keyof FormValues]
                          .length === 4
                          ? styles.validField
                          : ''
                      }`}
                      placeholder='0000'
                      maxLength={4}
                      disabled={isSubmitting}
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                        handleInputChange(index, e.target.value, setFieldValue)
                      }
                      onKeyDown={(e: React.KeyboardEvent) =>
                        handleKeyDown(index, e, values)
                      }
                    />
                  </div>
                ))}
              </div>

              <ErrorMessage
                name='cardNumber1'
                component='div'
                className={styles.error}
              />
              <ErrorMessage
                name='cardNumber2'
                component='div'
                className={styles.error}
              />
              <ErrorMessage
                name='cardNumber3'
                component='div'
                className={styles.error}
              />
            </div>

            {/* CVC2 */}
            <div className='mb-4'>
              <div className='d-flex flex-column align-items-start'>
                <label
                  htmlFor='cvc2'
                  className={`form-label fw-semibold mb-2 ${styles.label}`}
                >
                  CVC2:
                </label>
                <Field
                  name='cvc2'
                  id='cvc2'
                  type='password'
                  className={`form-control ${styles.cvcInput} ${styles.input} ${
                    values.cvc2 && values.cvc2.length === 3
                      ? styles.validField
                      : ''
                  }`}
                  placeholder='000'
                  maxLength={3}
                  disabled={isSubmitting}
                />
              </div>
              <ErrorMessage
                name='cvc2'
                component='div'
                className={styles.error}
              />
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <div className='d-grid gap-2 d-md-flex justify-content-md-end mt-4'>
              <button
                type='button'
                className={`btn btn-outline-secondary me-md-2 ${styles.button}`}
                onClick={() => navigate(-1)}
                disabled={isSubmitting}
              >
                –ù–∞–∑–∞–¥
              </button>
              <button
                type='submit'
                className={`btn btn-primary ${styles.button}`}
                disabled={isSubmitting}
              >
                {isSubmitting ? (
                  <>
                    <span
                      className='spinner-border spinner-border-sm me-2'
                      role='status'
                      aria-hidden='true'
                    ></span>
                    –ü—Ä–æ–≤–µ—Ä–∫–∞...
                  </>
                ) : (
                  '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å!'
                )}
              </button>
            </div>
          </Form>
        )}
      </Formik>

      {/* –®—É—Ç–ª–∏–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ */}
      <div className={`mt-4 p-3 rounded text-center ${styles.warning}`}>
        <small className={styles.warningText}>
          <strong>üòÑ –®—É—Ç–∫–∞ —Ä–∞–¥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!</strong>
          <br />
          –≠—Ç–∞ —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ —É—á–µ–±–Ω—ã—Ö —Ü–µ–ª—è—Ö. –ù–∞—Å—Ç–æ—è—â–∏–µ –º–æ—à–µ–Ω–Ω–∏–∫–∏ —Ç–∞–∫ –Ω–µ —à—É—Ç—è—Ç!
        </small>
      </div>
    </>
  );
}
