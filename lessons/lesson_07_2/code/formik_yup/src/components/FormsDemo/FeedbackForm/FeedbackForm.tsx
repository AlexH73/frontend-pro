import { type JSX, useState } from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import styles from './FeedbackForm.module.css';

const validationSchema = Yup.object({
  name: Yup.string()
    .required('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    .min(2, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞'),
  email: Yup.string().required('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ').email('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
  rating: Yup.number()
    .required('–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É')
    .min(1, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ 1')
    .max(5, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ 5'),
  category: Yup.string().required('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é'),
  message: Yup.string()
    .required('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    .min(10, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤')
    .max(500, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤'),
});

interface FormValues {
  name: string;
  email: string;
  rating: number;
  category: string;
  message: string;
}

export default function FeedbackForm(): JSX.Element {
  const [hoverRating, setHoverRating] = useState(0);

  const initialValues: FormValues = {
    name: '',
    email: '',
    rating: 0,
    category: '',
    message: '',
  };

  const categories = [
    'üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
    'üöÄ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é',
    'üêõ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ',
    'üí¨ –û–±—â–∏–π –æ—Ç–∑—ã–≤',
    'üì± –†–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
  ];

  const handleSubmit = (
    values: FormValues,
    { setSubmitting, resetForm }: any
  ) => {
    setTimeout(() => {
      const ratingText = ['üòû', 'üôÅ', 'üòê', 'üòä', 'üòç'][values.rating - 1];
      alert(
        `üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤, ${values.name}!\n\n` +
          `–û—Ü–µ–Ω–∫–∞: ${values.rating}/5 ${ratingText}\n` +
          `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${values.category}\n\n` +
          `–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!`
      );
      setSubmitting(false);
      resetForm();
      setHoverRating(0);
    }, 1000);
  };

  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={handleSubmit}
    >
      {({ isSubmitting, values, setFieldValue }) => (
        <Form>
          <div className='mb-3'>
            <label htmlFor='name' className='form-label'>
              –ò–º—è *
            </label>
            <Field
              name='name'
              type='text'
              className={`form-control ${styles.input} ${
                values.name && values.name.length >= 2 ? styles.validField : ''
              }`}
              placeholder='–í–∞—à–µ –∏–º—è'
              disabled={isSubmitting}
            />
            <ErrorMessage
              name='name'
              component='div'
              className={styles.error}
            />
          </div>

          <div className='mb-3'>
            <label htmlFor='email' className='form-label'>
              Email *
            </label>
            <Field
              name='email'
              type='email'
              className={`form-control ${styles.input} ${
                values.email && values.email.includes('@')
                  ? styles.validField
                  : ''
              }`}
              placeholder='your@email.com'
              disabled={isSubmitting}
            />
            <ErrorMessage
              name='email'
              component='div'
              className={styles.error}
            />
          </div>

          <div className='mb-3'>
            <label className='form-label'>–û—Ü–µ–Ω–∫–∞ *</label>
            <div className={styles.ratingContainer}>
              <span className={styles.ratingLabels}>–ü–ª–æ—Ö–æ</span>
              {[1, 2, 3, 4, 5].map((star) => (
                <button
                  key={star}
                  type='button'
                  className={`${styles.star} ${
                    star <= (hoverRating || values.rating) ? styles.active : ''
                  }`}
                  onClick={() => setFieldValue('rating', star)}
                  onMouseEnter={() => setHoverRating(star)}
                  onMouseLeave={() => setHoverRating(0)}
                  disabled={isSubmitting}
                >
                  ‚òÖ
                </button>
              ))}
              <span className={styles.ratingLabels}>–û—Ç–ª–∏—á–Ω–æ</span>
            </div>
            <ErrorMessage
              name='rating'
              component='div'
              className={styles.error}
            />
          </div>

          <div className='mb-3'>
            <label htmlFor='category' className='form-label'>
              –ö–∞—Ç–µ–≥–æ—Ä–∏—è *
            </label>
            <Field
              as='select'
              name='category'
              className={`form-select ${styles.input} ${
                values.category ? styles.validField : ''
              }`}
              disabled={isSubmitting}
            >
              <option value=''>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
              {categories.map((category, index) => (
                <option key={index} value={category}>
                  {category}
                </option>
              ))}
            </Field>
            <ErrorMessage
              name='category'
              component='div'
              className={styles.error}
            />
          </div>

          <div className='mb-3'>
            <label htmlFor='message' className='form-label'>
              –°–æ–æ–±—â–µ–Ω–∏–µ *
            </label>
            <Field
              as='textarea'
              name='message'
              className={`form-control ${styles.input} ${
                values.message && values.message.length >= 10
                  ? styles.validField
                  : ''
              }`}
              rows={4}
              placeholder='–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ...'
              disabled={isSubmitting}
            />
            <div className='form-text'>
              {values.message.length}/500 —Å–∏–º–≤–æ–ª–æ–≤
            </div>
            <ErrorMessage
              name='message'
              component='div'
              className={styles.error}
            />
          </div>

          <button
            type='submit'
            className='btn btn-info w-100'
            disabled={isSubmitting}
          >
            {isSubmitting ? (
              <>
                <span
                  className='spinner-border spinner-border-sm me-2'
                  role='status'
                ></span>
                –û—Ç–ø—Ä–∞–≤–∫–∞...
              </>
            ) : (
              'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'
            )}
          </button>
        </Form>
      )}
    </Formik>
  );
}
